
-*- mode: org; -*-

#+SETUPFILE: ~/org/aw-org-html-themes/setup/theme-readtheorg-local.setup
#+Options: \n:t
#+Title: live-scripting


* Einleitung 
- Was ist Live-Scripting?
 

* Installation unter lubuntu
Die Installation wird unter Lubuntu ausgeführt. Lubunut ist leichtgewichtig und eignet sich daher auch für virtuelle Machinen und Cloudumgebungen.

** Vorraussetzungen
Es ist ein Linux mit einem graphischen Interface und einer GNU Emacs Installation notwenig, um Live-Scripting aufzusezten.
In diesem Beispiel wird Lubuntu 19.10 und GNU Emacs 26.3 verwendet. 

#+Caption: Dieses Listing zeigt den Lubuntu Upgrade von von 19.04 auf 19.10 und die Emacs Installation.
#+begin_src bash
sudo sed -i -e 's|disco|eoan|g' /etc/apt/sources.list
sudo apt update
sudo apt upgrade

### Neues Release
lubuntu@lubuntu-pc:~$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 19.10
Release:        19.10
Codename:       eoan


### Install emacs
lubuntu@lubuntu-pc:~$ sudo snap install emacs --classic
2020-06-19T09:39:50+02:00 INFO Waiting for restart...
emacs 26.3 from Alex Murray (alexmurray) installed

### Clone project live-scripting
mkdir org; cd org
git clone https://github.com/andreaswittmann/live-scripting.git 
#+end_src

Damit sind die Vorraussetzungen für live-scripting geschaffen.


** Basic Live-Scripting
In der Basis-Konfiguration wird die GNU Emacs Installation angepasst, um aus einer Orgmode-Datei Shell-Befehle auszuführen.
Dazu benutze ich die init.el aus diesem Projekt

#+begin_src bash
### Copy init.el to emacs
cp ~/org/live-scripting/init.el ~/.emacs.d/

### Restart emacs
#+end_src 

Wir öffnen nun in emacs zwei Fenster nebeneinander. Im rechten führen wir ein ansi-term aus. 
Im linken Fenster führen wir Shell-Befehle aus einer Orgmode-Datei aus. 

| M-x 3         | 2 Fenster öffnen                     |
| C-x o         | other-window                         |
| M-x ansi-term | Ansi Term öffnen                     |
| C-x 0         | other-window                         |
| F5            | Befehl senden und eine Zeile weiter. |

Es können jezt Shell-Befehle direkt ausgeführt werden. Der Code-Block dient nur der Formatierung. 

#+begin_src bash
### Der 

ls -la
date
whoami
pwd
#+end_src

** Spacemacs Konfiguration
Emacs Konfiguraiton ist sehr zeitaufwendig. Mit dem Spacemacs Projekt erhält man eine sehr umfangreich konfiguriertes Emacs.
*** Installation
Spacemacs wird von GitHub geklont. Vorher sichere ich das Zielverzeichnis weg, damit es nicht überschrieben wird. Das alte init.el wird nicht mehr verwendet.

#+begin_src bash
### move emacs directory, to save it. 
mv ~/.emacs.d ~/_emacs.d
mkdir ~/.emacs.d
cd ~/.emacs.d
ls -la
### Install spacemacs
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
#+end_src

Emacs wird nun neu gestartet. Es folgt der Spacemacs Startdialog.
Ich wähle ich folgende Optionen:
- Editing Style: emacs
- Distribution: standard
- Completion Frameword: helm

Ich editire ~/.spacemacs um folgende Layers zu benutzen:
#+begin_src emacs-lisp
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     helm
     auto-completion
     ;; better-defaults
     emacs-lisp
     git
     markdown
     org
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     spell-checking
     ;; syntax-checking
     version-control
     themes-megapack
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '(
     minimap
     sr-speedbar
     ;;;; Org
     org-beautify-theme
    
    )
#+end_src 

 Emacs muss danach mehrfach neu gestartet werden, bis er sich fehlerfrei initialisiert.

Ich möchte das Datei .spacemacs ein Teil des Projekts wird. Sie wird vom Benutzerverzeichnis verlinkt.
#+begin_src bash
cd ~
mv .spacemacs org/live-scripting/
ln -s ~/org/live-scripting/.spacemacs ~/.spacecmacs

#+end_src


*** Default Theme einstellen. 
Dazu muss man die Variable dotspacemacs-themes in .spacemacs editieren.
#+begin_src emacs-lisp
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(leuven
                         tangotango
                         spacemacs-dark
                         spacemacs-light)

#+end_src


*** Send to ansi-term 
Das alte inti.el wurde durch das .spacemacs ersetzt. Ich muss hier die Änderungen machen um den ansi-term zu steuern.
Dazu wird die Funktion  dotspacemacs/user-config erweitert.


#+begin_src emacs-lisp
;;;; Send region and line to ansi-term
;; https://emacs.stackexchange.com/questions/28122/how-to-execute-shell-command-from-editor-window/28126#28126
(defun send-region-to-ansi ()
  "If region active, send it to ansi-term buffer."
  (interactive)
  (if (region-active-p) 
      (send-region "*ansi-term*" (region-beginning) (region-end))))

;; Meine Erweiterungum Lines zu senden
(defun my-select-current-line ()
  "Selects the current line, including the NEXT-LINE char at the end"
  (interactive)
  (move-beginning-of-line nil)
  (set-mark-command nil)
  (move-end-of-line 2)
  (move-beginning-of-line nil)
  (setq deactivate-mark nil))

(defun send-line-to-ansi ()
  "If region active, send it to ansi-term buffer."
  (interactive)
  (my-select-current-line)
  (if (region-active-p)
      (send-region "*ansi-term*" (region-beginning) (region-end)))
   (deactivate-mark 1))

;; das funktioniert sehr gut. Binden auf F8
(global-set-key [f5] 'send-line-to-ansi)
(global-set-key [f6] 'send-region-to-ansi)
(global-set-key [f7] 'other-window)
(global-set-key (kbd "C-n") 'other-window)

;; In ansi-term toggle between char run/line run mode.
;;http://joelmccracken.github.io/entries/switching-between-term-mode-and-line-mode-in-emacs-term/
(defun jnm/term-toggle-mode ()
  "Toggles term between line mode and char mode"
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))
(global-set-key [f8] 'jnm/term-toggle-mode)



  ;; Moving Lines, from http://emacsredux.com/blog/2013/04/02/move-current-line-up-or-down/
  ;; Transpose function for lines 
  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  ;; Diese Kürzel kollidieren nicht mit org-mode
  (define-key input-decode-map "\e[1;5A" [C-up])
  (define-key input-decode-map "\e[1;5B" [C-down])
  (global-set-key [(C-up)] 'move-line-up)
  (global-set-key [(C-down)] 'move-line-down)
#+end_src

Jetzt können Befehl direkt in einem ansi-term ausgeführt werden.
Test:

| F5 | send line to ansi-term        |
| F6 | send region to ansi-term      |
| F7 | othe window (C-x o)           |
| F8 | toggle char run/line run mode |


#+begin_src bash
ls -la
pwd
whoami
date
#+end_src













*** Flyspell konfigurieren.
Flyspell funktioniert bereits. Ich möchte das Dictionary auf deutsch umstellen.
Dazu muss es erste installiert werden. Das geht bei Ubuntu über den Paket-Manager.
Ich möchte aber lieber hunspell verwenden und installiere es gleich mit. 
Hinweise zu Dictionaries gibt es bei Ubuntu: [[https://wiki.ubuntuusers.de/Rechtschreibkorrektur/#Woerterb%C3%BCcher][https://wiki.ubuntuusers.de/Rechtschreibkorrektur/#Woerterb%C3%BCcher]]

#+begin_src  bash
### aspell Dictionary laden
sudo apt-get install aspell-de

### Hunspell installieren.
sudo apt-get install hunspell
sudo apt-get install hunspell-de-de
sudo apt-get install hunspell-de-de-frami 

which hunspell  # /usr/bin/hunspell
#+end_src



| M-x ispell-change-dictionray               | deutsch wählen.                     |
| M-x customize-varialbe ispell-dictionary   | Sting wählen und deutsch eintragen. |
| M-x customize-varialbe ispell-program-name | Eintrag: /usr/bin/hunspell          |

Test: Welches Programm wird verwendet? 
Im Message-Buffer findet sich der Eintrag: 
#+begin_src 
Starting new Ispell process /usr/bin/hunspell with deutsch dictionary...
Saving file /home/lubuntu/org/live-scripting/.spacemacs...
#+end_src

*** Magit Authentication                                             :ATTACH:
    :PROPERTIES:
    :ID:       8e92dbc8-3003-4938-9093-885bc40197a6
    :END:
Ich möchte von Magit nach Github schreiben können, ohne erneut das Password einzugeben.
Das geht mit SSH Schlüssel in drei Schritten. 

- *1. SSH-Schlüsselpaar erzeugen.*
- *2. ssh config Datei erzeugen.*
- *3. Öffentlicher Schlüssel in GitHub registrieren.:*

#+begin_src bash
### Check for keys.
cd ~
ls -la .ssh


### Generate key
mkdir .ssh 
cd ~/.ssh
ssh-keygen -t rsa -b 4096 -C "lubuntu.mac@live-scripting.de"
id_rsa_github


# Empty Passpharse 2x RET
ls -la
## create config file
cat << EOF > ~/.ssh/config
Host github.com
  IdentitiesOnly yes
  IdentityFile ~/.ssh/id_rsa_github
EOF
 cat  ~/.ssh/config

### Copy the public Key to github via web gui
cat ~/.ssh/id_rsa_github.pub

### Prepare projects
cat ~/.ssh/id_rsa_github.pub
cd ~/org/live-scripting
git remote set-url origin ssh://git@github.com/andreaswittmann/live-scripting
git remote -v

cd ~/org/aw-org-html-themes
git remote set-url origin ssh://git@github.com/andreaswittmann/aw-org-html-themes  
git remote -v
git push

cd /var/www/html/orgweb/
git remote -v
git remote set-url origin ssh://git@github.com/andreaswittmann/orgweb   

### Check git operations
git pull -v 
git push -v

#+end_src

Die folgende Abbildung zeigt, wie man den öffentlichen Schlüssel zum GitHub Projekt hinzufügt, um mit SSH darauf zugreifen zu können.

#+DOWNLOADED: file:///home/lubuntu/org/live-scripting/docs/live-scripting/data/8e/92dbc8-3003-4938-9093-885bc40197a6/2020-06-21_17-34-52_2020-06-21_17-15-37.png @ 2020-06-30 10:26:47
#+Caption: Öffentlichen Schlüssel zum GitHub Projekt hinzufügen.
[[file:images/Installation_unter_lubuntu/2020-06-30_10-26-47_2020-06-21_17-34-52_2020-06-21_17-15-37.png]]



*** Konfiguration von org-download                                   :ATTACH:
    :PROPERTIES:
    :ID:       b476e18c-3478-4119-90b8-16c7c4b4df23
    :END:
org-download ist ein Emacs-Paket, das es erlaubt, Bilder per Drag and Drop einer Org-Datei hinzuzufügen. 
GitHub: https://github.com/abo-abo/org-download

Org-Download bietet zwei Methoden zum abspeichern der Dateien. Ich möchte den Org-Attachment Mechanismus benutzen. 
Dazu muss die Variable org-download-method per Customization angepasst werden.

#+DOWNLOADED: file:///tmp/DOS33/2020-06-21_17-51-44.png @ 2020-06-21 17:52:54
#+Caption: Customization von org-download-method um auf org-attach umzustellen.
[[attachment:2020-06-21_17-52-54_2020-06-21_17-51-44.png]





*** Adobe Font Source Code Pro installieren
Das ist der Default Font für Spacemacs.
Es gibt eine Anleitung unter: https://gist.github.com/enzinier/8d00d3f37d2e23985dcfa65662d163fa

#+begin_src bash
#!/bin/sh
# Userland mode (~$USER/), (~/).

# ~/.fonts is now deprecated and that
#FONT_HOME=~/.fonts
# ~/.local/share/fonts should be used instead
cd
FONT_HOME=~/.local/share/fonts

echo "installing fonts at $PWD to $FONT_HOME"
#mkdir -p "$FONT_HOME/adobe-fonts/source-code-pro"
f
ind "$FONT_HOME" -iname '*.ttf' -exec echo '{}' \;

(git clone \
   --branch release \
   --depth 1 \
   'https://github.com/adobe-fonts/source-code-pro.git' \
   "$FONT_HOME/adobe-fonts/source-code-pro" && \
fc-cache -f -v "$FONT_HOME/adobe-fonts/source-code-pro")

### Die Fonts liegen jetzt unter ~/.local/share/fonts/adobe-fonts/source-code-pro
#+end_src

Der verwendete Font kann überprüft werden mit: M-x describe-font
Das ist mir aber zu klein. Deshalb verwende ich 15pt. Das wird in .spacemacs unter der Variable dotspacemacs-default-font eingestellt. 


#+begin_src emacs-lisp
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 15
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
#+end_src


*** SpeedKeys einrichten.
ES gibt ein das Modul org-speed-commands, manchmal auch speedkeys genannt,, mit dem sich eine Orgsturktur noch viel schneller navigieren lässt. 
Um sie zu nutzen muss die variable *org-use-speed-commands* über M-x customize-variable auf non-nil gesetzt werden. 
Links:
- Stack Exchange :: [[https://emacs.stackexchange.com/questions/33310/how-to-use-org-mode-speed-commands-speed-keys][key bindings - how to use org-mode speed commands (speed keys)? - Emacs Stack Exchange]]
- Blog scratch :: [[http://notesyoujustmightwanttosave.blogspot.com/2011/12/org-speed-keys.html][Org Speed Keys | *scratch*]]

#+begin_example
Speed-Commands Key Binings anzeigen:
Cursor auf ersten Stern eines Org-Headins + ?
#+end_example






** Lokale Website erzeugen. 
Ich möchte nun vom Projekt eine Website erzeugen, die in einem lokalen Webserver läuft. 
Es ist eine statische Website, die später auf einen Webserver im Internet repliziert werden kann.

*** Installation von nginx
Ich nutze den nginx Webserver, es gibt ein Installationspaket von Ubuntu.
Es gibt eine Anleitung unter: 
[[https://mediatemple.net/community/products/developer/204405534/install-nginx-on-ubuntu][nginx on ubuntu]]

#+begin_src bash
### Install nginx
sudo apt-get update
sudo apt-get install nginx
Y
## nginx starten
sudo  /etc/init.d/nginx start 
sudo  /etc/init.d/nginx status
sudo  /etc/init.d/nginx stop

## show web root
ls -la /var/www/html/index.nginx-debian.html

## setup a simple website:
sudo mkdir -p /var/www/html/simple
sudo mkdir -p /var/www/html/simple
cd  /var/www/html/simple
ls -la
sudo chown  lubuntu .
cat << EOF > /var/www/html/simple/index.html 
<html>
<body>
<h1>Welcome to simple Web!</h1>
<p>If you see this page, Simple Web ist running.</p>

</body>
</html>
EOF

cat index.html

### get local ip address in lan
ip a  #http://10.211.55.8/
#+end_src 

URL zum Testen: http://localhost/
URL zum Testen: http://localhost/index.nginx-debian.html
URL zum Testen: http://localhost/simple/index.html
URL im LAN: http://10.211.55.8/
Ok.

*** Einrichten von org-publish
Mit org-publish kann eine Website erstellt werden. 
Zunächst lege ich das Verzeichniss für die Webroot an und vergebe Rechte um als Benutzer lubuntu arbeiten zu können.

#+begin_src bash
### Clean up 
sudo rm -rf   /var/www/html/orgweb/
sudo rm -rf   /var/www/html/
ham2burg
### create directoy for project live-scripting
sudo mkdir -p   /var/www/html/orgweb
### nginx worker and lubuntu must  have access
sudo chown lubuntu  /var/www/html/orgweb/

cd  /var/www/html/orgweb
ls -la

### Force regenerating the project
rm -r  /var/www/html/orgweb/*
ls -la  /var/www/html/orgweb
find  /var/www/html/orgweb
cd ~/org/
find . -exec touch {} \;
#+end_src

Nun benötige ich die Konfiguration in einer alist Variable. Diese Konfiguration beschreibt den Publish Prozess.

#+begin_src emacs-lisp
;; Eval mit C-x C-e am Zeilenende
;; Publisch mit M-x org-publish-project RET org RET

(require 'ox-publish)
(setq org-publish-project-alist
      '(

       ;; ... add all the components here (see below)...
       ("orgxxx" :components ("org-notes" "org-static"))



       ("org-notes"
        :base-directory "~/org/live-scripting/"
        :base-extension "org"
        :publishing-directory "/var/www/html/live-scripting"
        ;;:exclude ".*"
        ;;:include ["foobar.org"]
        :recursive t
        :publishing-function org-html-publish-to-html
        :headline-levels 4             ; Just the default for this project.
        :auto-preamble t
        :auto-sitemap t                ; Generate sitemap.org automagically...
        :sitemap-filename "sitemap.org"  ; ... call it sitemap.org (it's the default)...
        :sitemap-title "Sitemap"         ; ... with title 'Sitemap'.
        )

       ("org-static"
        :base-directory "~/org/live-scripting/"
        :base-extension "css\\|js\\|png\\|jpg\\|jpeg\\|gif\\|pdf\\|txt\\|mp3\\|ogg\\|swf"
        :exclude ".git\\|LICENSE"
        :publishing-directory "/var/www/html/live-scripting/"
        :recursive t
        :publishing-function org-publish-attachment
        )
      ))



#+end_src

Der Publish-Prozess wird aufgerufen mit: *M-x org-publish-project*
Dann kann im nächsten Schritt eines der in alist konfigurierten Projekte ausgewählt werden.

http://localhost/live-scripting/live-scripting.html
Es kann sein, das es Fehler gibt. Ich möchte fehlertolerant generieren.
Dazu 

Test URL: http://localhost/live-scripting/sitemap.html
Test URL: http://localhost/live-scripting/live-scripting.html


*** Konfiguration für org-publish aus externer Datei laden.
Ich möchte die Konfiguration in einer externen Datei speichern und beim Emacs start laden. 
Dazu erzeuge ich die Datei publish-project.el und lade sie in .spacemacs:
#+begin_src emacs-lisp
;; Lade die Konfiguraiton für org-publish
(load-file "~/org/live-scripting/publish-project.el")
#+end_src
Ok.

*** Dateianhänge und Bilder
Dateianhänge und Bilder können direkt mit Drag-And-Drop in die Org-Datei reingezogen werden. Das Modul org-download sorgt dann dafür, das diese Dateien eingebettet und im Ordner images abgelegt werden. Bilder werden inline angezeigt, für andere Dateien wird ein Link generiert. 
Diese Dateien werden auch durch org-publish zur Website kopiert.

Beispiel für ein eingebettetes Bild:


#+DOWNLOADED: file:///home/lubuntu/Desktop/banana.jpeg @ 2020-06-24 11:21:33
#+caption: Eingebettete Bild-Datei 
[[file:images/Installation_unter_lubuntu/2020-06-24_11-21-33_banana.jpeg]]

Beispiel für eine eingebettete PDF Datei:
 
#+DOWNLOADED: file:///home/lubuntu/Desktop/orgcard.pdf @ 2020-06-24 11:15:55
#+Caption: Eingebettete PDF Datei.
[[file:images/Installation_unter_lubuntu/2020-06-24_11-15-55_orgcard.pdf]]


*** Problem: Einige Bilder werden nicht angezeigt.
In der generierten Website werden einige Bilder nicht angezeigt.

**** Analyse
Es gibt Dateien unter der Webroot, die dem Benutzer lubuntu gehören und keine Leseberechtigung für Andere haben. Der nginx-Workerprozess gehört www-data und kann diese Dateien nicht lesen.
Es handelt sich um einige Bild-Dateien, die ich mit Drag-And-Drop aus Firefox nach Orgmode gezogen hatte.

**** Lösung
Ich suche diese Dateien und setze die Berechtigungen.
Anschließend muss die Website mit org-publish neu generiert werden. 

 #+begin_src bash
 ### Handle Permissions.
 cd ~/org/live-scripting
 ## Find files that don't have read permission for others.
 find images -user lubuntu \! -perm -o+r  -type f -exec ls -l {} \;
 find images -user lubuntu \! -perm -o+r  -type f -exec touch {} \;
 ## Add read permission for other
 find images -user lubuntu \! -perm -o+r  -type f -exec chmod o+r {} \;
 #+end_src








*** HTML Style Readtheorg
Es gibt ein sehr gutes CSS basiertes Style-Sheet Framework für Org-Dateien. 
Siehe: https://github.com/fniessen/org-html-themes
Ich möchte das Thema ReadTheOrg benutzen und es lokal installieren. 

#+begin_src bash
### Clean update
cd
rm -rf ~/org/org-html-themes
### Clone the Project
cd org
git clone https://github.com/fniessen/org-html-themes.git
find~/org/org-html-themes
### 
#+end_src

Um das die themes  zu benutzen, muss das Verzeichnis styles zur Website kopiert werden. 
Dazu erweitere ich die Konfiguration in publish-project.el
#+begin_src emacs-lisp
       ("org-themes"
        :base-directory "~/org/org-html-themes/styles"
        :base-extension "css\\|js\\|png\\|jpg\\|jpeg\\|gif\\|pdf\\|txt\\|mp3\\|ogg\\|swf"
        :exclude ".git\\|LICENSE"
        :publishing-directory "/var/www/html/live-scripting/styles"
        :recursive t
        :publishing-function org-publish-attachment
        )
#+end_src

Das Thema wird angewendet durch die folgende Directive SETUPFILE am Anfang der org-Datei:
#+begin_src 
#+SETUPFILE: ~/org/org-html-themes/setup/theme-readtheorg-local.setup
#+Options: \n:t
#+Title: live-scripting
#+end_src

Mit org-publish wird in dieser Datei jetzt das Style-sheet verwendet.


** Multi-Project Website 
I want to create a website that spans multiple git projects. 
This website will be created and updated with a single command. It uses the recursive feature org org-publish. 
It is implemented in publish-project.el in the orgweb definition.

*** Creating the fork of org-html-themes
I have used the GitHub project org-html-themes for applying style sheets to my local website. Now I want to fork this project. I can then make local modifications to the themes. I also want to integrate it into my local website.
I use the GitHub GUI on the web to fork and rename the project to aw-org-html-themes: https://github.com/andreaswittmann/aw-org-html-themes
I make a local clone of the project.

#+begin_src bash
### Clean update
cd
rm -rf ~/org/aw-org-html-themes
### Clone the Project
cd org
git clone https://github.com/andreaswittmann/aw-org-html-themes.git
find ~/org/aw-org-html-themes
### 
#+end_src

*** Using styles of the forked project.
Now I want to use my fork aw-org-html-themes. I have to change the directive SETUPFILE in all org-files and the base-directory path for the component orgweb-themes in publish-project.el.
#+begin_src 
#+SETUPFILE: ~/org/aw-org-html-themes/setup/theme-readtheorg-local.setup
#+Options: \n:t
#+Title: live-scripting
#+end_src

*** Problem: the folder "style" is not found by the html files.
The publish process does not respect the folder structure. It expects a style folder on the same directory level. The solution must take into account the option to replicate the static website to a server on the internet. 


I write the emacs-lisp  function "fixStyleFolder". It is called by :completion-function. It gets the projectPropertyList as an argument. This list contains the publishingDirectory. The function will call the shell script fixStyleFolder.sh that which creates symbolic links in all sub folders.


#+begin_src emacs-lisp
;; Example for projectPropertyList
(:base-directory ~/org/aw-org-html-themes/styles :base-extension css\|js\|png\|jpg\|jpeg\|gif\|pdf\|txt\|mp3\|ogg\|swf :exclude .git\|LICENSE :publishing-directory /var/www/html/orgweb/styles :completion-function myFunction :recursive t :publishing-function org-publish-attachment)
#+end_src

The emacs-lisp function fixStyleFolder is contained in the file publish-project.sh.
The shell script is located at ~/org/live-scripting/bin/fixStyleFolder.sh

*** Updating the orgweb site 
The orgweb site can be updated with org-publish.
| Emacs Command                          | Description                                |
|----------------------------------------+--------------------------------------------|
| M-x org-publish-project RET orgweb RET | Create or Update all components of orgweb. |

Cleaning up and recreating everything.
#+begin_src bash
### Force regenerating the project
## Delete Webroot
rm -r  /var/www/html/orgweb/*
ls -la  /var/www/html/orgweb
## touch all org files.
cd ~/org/
find . -exec touch {} \;

## use org-publish-project to recreate all.
## check 
find  /var/www/html/orgweb/

#+end_src

This recreates the website with all attachments.

** Publish to github pages.
(Don't do it! Read the conclusion)
I want to publish the static website orgweb to github pages. 
There are different approaches explained on: https://help.github.com/en/github/working-with-github-pages

*** Publish to docs folder

 I create docs directory and copy the site there. Then I commit and push it with magit.
 #+begin_src bash
   ### Creating a link.
   cd ~/org/live-scripting

   rm -rf  ~/org/live-scripting/docs
   mkdir -p  ~/org/live-scripting/docs
   cd ~/org/live-scripting/docs
   cp -r /var/www/html/orgweb/* .
   ls -la 
   find .

   ## create index.html from sitmap.html
   cp sitemap.html index.html 

   ## remove all symlinks, they are external and break github pages.
   cd ~/org/live-scripting/docs
   find . -type l 
   find . -type l -exec rm {} \;

   ## create symlinks manually
   cd ~/org/live-scripting/docs/live-scripting
   ls -la 
   ln -s ../styles styles

 #+end_src
 Ok, this works.
 The site is online at: https://andreaswittmann.github.io/live-scripting/sitemap.html
 The site is online at: https://andreaswittmann.github.io/live-scripting/live-scripting/live-scripting.html
 The style sheet is loaded. The PDF attachments are available as well.

*Conlclusion:*
It is possible to publish the project to the docs folder in Github, thus demonstrating the capability of org-publish to create a static web site, including style sheets and attachments. However there are some aspects that I don't like. First, since this is a multi-project website, the publish site shouldn't really be inside the project live-scripting but be a project on it's own. Second, I don't like the idea of copying the project from the publish site to the docs directory, thus duplicating all files. This was necessary because git doesn't follow symbolic link. 

*** Publish to a project
In this approach the published website becomes it's own GitHub project. 

**** Activities
There are the following activities:
- [X] Create new GitHub Project orgweb.
- [X] Clone orgweb to local publish site.
- [X] Insert public key on GitHub to push without password
- [X] Use org-publish to create the project.
- [X] Use Magit to publish site to GitHub
- [ ] Write script to automatically commit on push on every org-publish
- [X] Update FixStyleFolder to use relative links.

That's it. 

**** GitHub Project orgweb. 


#+begin_src  bash
### Clean up and clone Website.
sudo rm -rf /var/www/html/orgweb/
ham2burg
cd /var/www/html/
ls -la

sudo git clone https://github.com/andreaswittmann/orgweb.git
sudo chown -R lubuntu:lubuntu  /var/www/html/orgweb/
cd /var/www/html/orgweb/

### Fix symbolic links
find . -type l 

## one level
cd /var/www/html/orgweb/./styles/
cd /var/www/html/orgweb/./live-scripting/
rm styles
ln -s ../styles styles
ls -la 
ls styles

## two levels
cd /var/www/html/orgweb/./aw-org-html-themes/demo/
cd /var/www/html/orgweb/./aw-org-html-themes/styles/
cd /var/www/html/orgweb/./live-scripting/moreorg/
rm styles
ln -s ../../styles styles
ls -la 
ls styles

## three levels
cd /var/www/html/orgweb/./aw-org-html-themes/styles/readtheorg
rm styles
ln -s ../../../styles styles
ls -la 
#+end_src


The site can be found at: https://andreaswittmann.github.io/orgweb/sitemap.html

An update of the site includes three steps:
1. org-publish orgweb
2. magit or git: add and commit files in project orgweb
3. git push project orgweb.

***** Troubleshooting
After pushing the project orgweb, GitHub starts a jykell Process to publish the site. 
This my lead to an error, send via email. Unfortunately the message very often is just useless like this.
There are no additional information.
#+begin_example
Error: The page build failed for the `master` branch with the following error:
#+end_example



**** Rebuilding the website.

These are the steps to rebuild the website completely
#+begin_src bash

cd /var/www/html/orgweb/
## find all generated files and remove them, exclude .git 
find . -maxdepth 1  ! -name .git ! -name README.md 
find . -maxdepth 1  ! -name .git ! -name README.md -exec rm -rf {} \;
ll

## removing files
git add .
git status
git commit -m "Resetting project"
git push

# touch all file to qualify for regenerating the web
cd ~/org
ll
find . ! -name sitemap.org  -exec touch {} \;
### regenerate web in emacs with org-publish-project orgweb

#+end_src

*** Conclusion
While it looks tempting to publish to github pages I have to advice against it. 
I managed to publish the website orgweb several times but also often ran into errors. 
The information provided to resolve the errors is not sufficient. This results in frustrating and time consuming analysis sessions. It is a waste of time.
The Pages feature in github up to now [2020-06-30 Di] is not mature enough to be used in real world projects!
Other publishing options like web servers or Amazon S3 will be explored.

** Publish to Amazon S3
Amazon S3 is a storage service that includes basic webserver capabilities. It can host static websites, but doesn't not allow for https and authentication. This is fine for this project.

**** Installation of aws-cli and bucket creation
I need the the command line client from aws to access s3 buckets. I want to install aws-cli version 2.
I follow instructions from https://docs.aws.amazon.com/de_de/cli/latest/userguide/install-cliv2-linux.html

#+begin_src bash
mkdir ~/Downloads/aws-cli
cd ~/Downloads/aws-cli
ls -la
## we need curl
sudo apt install curl
ham2burg

## install aws-cli
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

aws --version
# aws-cli/2.0.27 Python/3.7.3 Linux/5.3.0-61-generic botocore/2.0.0dev31

### install profile and credentials for aws
cat ~/.aws/config
cat ~/.aws/credentials

### Test s3 access
export AWS_PROFILE=anwi-gmbh
aws s3 ls

### Creating a buckets, prepare website hosting on aws gui in the browser
aws s3 mb s3://live-scripting
aws s3 ls s3://live-scripting --recursive

### Sync website to 
cd /var/www/html/orgweb
pwd
find . 
ls -la
aws s3 sync /var/www/html/orgweb s3://live-scripting --delete 


### fix wrong links
mkdir ~/temp
cd ~/temp
cp /var/www/html/orgweb/sitemap.html .
ls -la
aws s3 sync . s3://live-scripting --delete 


#+end_src

Ok.

The website is available at http://live-scripting.s3-website.eu-central-1.amazonaws.com
/sitemap.html

**** Sync orgweb to s3 bucket.
The aws cli contains 

Problem: on the second run the link /var/www/html/orgweb/styles/styles is created but shouldn't
Analysis: This happens only on the second run of the script.
It also happens in subsequent identical calls to ln
I don't know why this happens.
Solution: Defensive code: check before creating link.

#+begin_src bash
## run script 
##----------------------------------------------------------------------------------------------- 
 ~/org/live-scripting/bin/fixStyleFolder.sh -c mycopy -d /var/www/html/orgweb/styles -L DEBUG

## check resuclt 
cd /var/www/html/orgweb/styles/
find /var/www/html/orgweb/ -type l -exec rm {} \;
find /var/www/html/orgweb/ -type l
find /var/www/html/orgweb/ -type d


## executing ln two times produes error
cd   /var/www/html/orgweb/aw-org-html-themes/demo 
pwd  /var/www/html/orgweb/aw-org-html-themes/demo 
ls -la
ln -s  ../../styles styles             

mkdir -p  /var/www/html/orgweb/aw-org-html-themes/foobar
cd   /var/www/html/orgweb/aw-org-html-themes/foobar
ls -la
ln -s  ../../styles styles             
 
#+end_src




