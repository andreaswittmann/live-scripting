live-scripting    -*- mode: org; -*-



* Einleitung 
- Was ist Live-Scripting?
 

* Installation unter lubuntu
Die Installation wird unter Lubuntu ausgeführt. Lubunut ist leichtgewichtig und eignet sich daher auch für virtuelle Machinen und Cloudumgebungen.


** Vorraussetzungen
Es ist ein Linux mit einem graphischen Interface und einer GNU Emacs Installation notwenig, um Live-Scripting aufzusezten.
In diesem Beispiel wird Lubuntu 19.10 und GNU Emacs 26.3 verwendet. 

#+Caption: Dieses Listing zeigt den Lubuntu Upgrade von von 19.04 auf 19.10 und die Emacs Installation.
#+begin_src bash
sudo sed -i -e 's|disco|eoan|g' /etc/apt/sources.list
sudo apt update
sudo apt upgrade

### Neues Release
lubuntu@lubuntu-pc:~$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 19.10
Release:        19.10
Codename:       eoan

### Install emacs
lubuntu@lubuntu-pc:~$ sudo snap install emacs --classic
2020-06-19T09:39:50+02:00 INFO Waiting for restart...
emacs 26.3 from Alex Murray (alexmurray) installed

### Clone project live-scripting
mkdir org; cd org
git clone https://github.com/andreaswittmann/live-scripting.git 
#+end_src

Damit sind die Vorraussetzungen für live-scripting geschaffen.


** Basic Live-Scripting
In der Basis-Konfiguration wird die GNU Emacs Installation angepasst, um aus einer Orgmode-Datei Shell-Befehle auszuführen.
Dazu muss benutzen wir die init.el aus diesem Projekt

#+begin_src bash
### Copy init.el to emacs
cp ~/org/live-scripting/init.el ~/.emacs.d/

### Restart emacs
#+end_src 

Wir öffnen nun in emacs zwei Fenster nebeneinander. Im rechten führen wir ein ansi-term aus. 
Im linken Fenster führen wir Shell-Befehle aus einer Orgmode-Datei aus. 

| M-x 3         | 2 Fenster öffnen                     |
| C-x o         | other-window                         |
| M-x ansi-term | Ansi Term öffnen                     |
| C-x 0         | other-window                         |
| F5            | Befehl senden und eine Zeile weiter. |

Es können jezt Shell-Befehle direkt ausgeführt werden. Der Code-Block dient nur der Formatierung. 

#+begin_src bash
### Der 

ls -la
date
whoami
pwd
#+end_src

** Spacemacs Konfiguration
Emacs Konfiguraiton ist sehr zeitaufwendig. Mit dem Spacemacs Projekt erhält man eine sehr umfangreich konfiguriertes Emacs.

<<<<<<< HEAD
*** Installation
Spacemacs wird von GitHub geklont. Vorher sichere ich das Zielverzeichnis weg, damit es nicht überschrieben wird. Das alte init.el wird nicht mehr verwendet.

#+begin_src bash
### move emacs directory, to save it. 
mv ~/.emacs.d ~/_emacs.d
mkdir ~/.emacs.d
cd ~/.emacs.d
ls -la
### Install spacemacs
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
#+end_src

Emacs wird nun neu gestartet. Es folgt der Spacemacs Startdialog.
Ich wähle ich folgende Optionen:
- Editing Style: emacs
- Distribution: standard
- Completion Frameword: helm

Ich editire ~/.spacemacs um folgende Layers zu benutzen:
#+begin_src emacs-lisp
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     helm
     auto-completion
     ;; better-defaults
     emacs-lisp
     git
     markdown
     org
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     spell-checking
     ;; syntax-checking
     version-control
     themes-megapack
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '(
     minimap
     sr-speedbar
     ;;;; Org
     org-beautify-theme
    
    )
#+end_src 

 Emacs muss danach mehrfach neu gestartet werden, bis er sich fehlerfrei initialisiert.

Ich möchte das Datei .spacemacs ein Teil des Projekts wird. Sie wird vom Benutzerverzeichnis verlinkt.
#+begin_src bash
cd ~
mv .spacemacs org/live-scripting/
ln -s ~/org/live-scripting/.spacemacs ~/.spacecmacs

#+end_src









