live-scripting    -*- mode: org; -*-



* Einleitung 
- Was ist Live-Scripting?
 

* Installation unter lubuntu
Die Installation wird unter Lubuntu ausgeführt. Lubunut ist leichtgewichtig und eignet sich daher auch für virtuelle Machinen und Cloudumgebungen.


** Vorraussetzungen
Es ist ein Linux mit einem graphischen Interface und einer GNU Emacs Installation notwenig, um Live-Scripting aufzusezten.
In diesem Beispiel wird Lubuntu 19.10 und GNU Emacs 26.3 verwendet. 

#+Caption: Dieses Listing zeigt den Lubuntu Upgrade von von 19.04 auf 19.10 und die Emacs Installation.
#+begin_src bash
sudo sed -i -e 's|disco|eoan|g' /etc/apt/sources.list
sudo apt update
sudo apt upgrade

### Neues Release
lubuntu@lubuntu-pc:~$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 19.10
Release:        19.10
Codename:       eoan

### Install emacs
lubuntu@lubuntu-pc:~$ sudo snap install emacs --classic
2020-06-19T09:39:50+02:00 INFO Waiting for restart...
emacs 26.3 from Alex Murray (alexmurray) installed

### Clone project live-scripting
mkdir org; cd org
git clone https://github.com/andreaswittmann/live-scripting.git 
#+end_src

Damit sind die Vorraussetzungen für live-scripting geschaffen.


** Basic Live-Scripting
In der Basis-Konfiguration wird die GNU Emacs Installation angepasst, um aus einer Orgmode-Datei Shell-Befehle auszuführen.
Dazu muss benutzen wir die init.el aus diesem Projekt

#+begin_src bash
### Copy init.el to emacs
cp ~/org/live-scripting/init.el ~/.emacs.d/

### Restart emacs
#+end_src 

Wir öffnen nun in emacs zwei Fenster nebeneinander. Im rechten führen wir ein ansi-term aus. 
Im linken Fenster führen wir Shell-Befehle aus einer Orgmode-Datei aus. 

| M-x 3         | 2 Fenster öffnen                     |
| C-x o         | other-window                         |
| M-x ansi-term | Ansi Term öffnen                     |
| C-x 0         | other-window                         |
| F5            | Befehl senden und eine Zeile weiter. |

Es können jezt Shell-Befehle direkt ausgeführt werden. Der Code-Block dient nur der Formatierung. 

#+begin_src bash
### Der 

ls -la
date
whoami
pwd
#+end_src

** Spacemacs Konfiguration
Emacs Konfiguraiton ist sehr zeitaufwendig. Mit dem Spacemacs Projekt erhält man eine sehr umfangreich konfiguriertes Emacs.
*** Installation
Spacemacs wird von GitHub geklont. Vorher sichere ich das Zielverzeichnis weg, damit es nicht überschrieben wird. Das alte init.el wird nicht mehr verwendet.

#+begin_src bash
### move emacs directory, to save it. 
mv ~/.emacs.d ~/_emacs.d
mkdir ~/.emacs.d
cd ~/.emacs.d
ls -la
### Install spacemacs
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
#+end_src

Emacs wird nun neu gestartet. Es folgt der Spacemacs Startdialog.
Ich wähle ich folgende Optionen:
- Editing Style: emacs
- Distribution: standard
- Completion Frameword: helm

Ich editire ~/.spacemacs um folgende Layers zu benutzen:
#+begin_src emacs-lisp
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     helm
     auto-completion
     ;; better-defaults
     emacs-lisp
     git
     markdown
     org
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     spell-checking
     ;; syntax-checking
     version-control
     themes-megapack
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '(
     minimap
     sr-speedbar
     ;;;; Org
     org-beautify-theme
    
    )
#+end_src 

 Emacs muss danach mehrfach neu gestartet werden, bis er sich fehlerfrei initialisiert.

Ich möchte das Datei .spacemacs ein Teil des Projekts wird. Sie wird vom Benutzerverzeichnis verlinkt.
#+begin_src bash
cd ~
mv .spacemacs org/live-scripting/
ln -s ~/org/live-scripting/.spacemacs ~/.spacecmacs

#+end_src


*** Default Theme einstellen. 
Dazu muss man die Variable dotspacemacs-themes in .spacemacs editieren.
#+begin_src emacs-lisp
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(leuven
                         tangotango
                         spacemacs-dark
                         spacemacs-light)

#+end_src


*** Send to ansi-term 
Das alte inti.el wurde durch das .spacemacs ersetzt. Ich muss hier die Änderungen machen um den ansi-term zu steuern.
Dazu wird die Funktion  dotspacemacs/user-config erweitert.


#+begin_src emacs-lisp
;;;; Send region and line to ansi-term
;; https://emacs.stackexchange.com/questions/28122/how-to-execute-shell-command-from-editor-window/28126#28126
(defun send-region-to-ansi ()
  "If region active, send it to ansi-term buffer."
  (interactive)
  (if (region-active-p) 
      (send-region "*ansi-term*" (region-beginning) (region-end))))

;; Meine Erweiterungum Lines zu senden
(defun my-select-current-line ()
  "Selects the current line, including the NEXT-LINE char at the end"
  (interactive)
  (move-beginning-of-line nil)
  (set-mark-command nil)
  (move-end-of-line 2)
  (move-beginning-of-line nil)
  (setq deactivate-mark nil))

(defun send-line-to-ansi ()
  "If region active, send it to ansi-term buffer."
  (interactive)
  (my-select-current-line)
  (if (region-active-p)
      (send-region "*ansi-term*" (region-beginning) (region-end)))
   (deactivate-mark 1))

;; das funktioniert sehr gut. Binden auf F8
(global-set-key [f5] 'send-line-to-ansi)
(global-set-key [f6] 'send-region-to-ansi)
(global-set-key [f7] 'other-window)
(global-set-key (kbd "C-n") 'other-window)

;; In ansi-term toggle between char run/line run mode.
;;http://joelmccracken.github.io/entries/switching-between-term-mode-and-line-mode-in-emacs-term/
(defun jnm/term-toggle-mode ()
  "Toggles term between line mode and char mode"
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))
(global-set-key [f8] 'jnm/term-toggle-mode)



  ;; Moving Lines, from http://emacsredux.com/blog/2013/04/02/move-current-line-up-or-down/
  ;; Transpose function for lines 
  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  ;; Diese Kürzel kollidieren nicht mit org-mode
  (define-key input-decode-map "\e[1;5A" [C-up])
  (define-key input-decode-map "\e[1;5B" [C-down])
  (global-set-key [(C-up)] 'move-line-up)
  (global-set-key [(C-down)] 'move-line-down)
#+end_src

Jetzt können Befehl direkt in einem ansi-term ausgeführt werden.
Test:

| F5 | send line to ansi-term        |
| F6 | send region to ansi-term      |
| F7 | othe window (C-x o)           |
| F8 | toggle char run/line run mode |


#+begin_src bash
ls -la
pwd
whoami
date
#+end_src













*** Flyspell konfigurieren.
Flyspell funktioniert bereits. Ich möchte das Dictionary auf deutsch umstellen.
Dazu muss es erste installiert werden. Das geht bei Ubuntu über den Paket-Manager.
Ich möchte aber lieber hunspell verwenden und installiere es gleich mit. 
Hinweise zu Dictionaries gibt es bei Ubuntu: [[https://wiki.ubuntuusers.de/Rechtschreibkorrektur/#Woerterb%C3%BCcher][https://wiki.ubuntuusers.de/Rechtschreibkorrektur/#Woerterb%C3%BCcher]]

#+begin_src  bash
### aspell Dictionary laden
sudo apt-get install aspell-de

### Hunspell installieren.
sudo apt-get install hunspell
sudo apt-get install hunspell-de-de
sudo apt-get install hunspell-de-de-frami 

which hunspell  # /usr/bin/hunspell
#+end_src



| M-x ispell-change-dictionray               | deutsch wählen.                     |
| M-x customize-varialbe ispell-dictionary   | Sting wählen und deutsch eintragen. |
| M-x customize-varialbe ispell-program-name | Eintrag: /usr/bin/hunspell          |

Test: Welches Programm wird verwendet? 
Im Message-Buffer findet sich der Eintrag: 
#+begin_src 
Starting new Ispell process /usr/bin/hunspell with deutsch dictionary...
Saving file /home/lubuntu/org/live-scripting/.spacemacs...
#+end_src

*** Magit Authentication                                             :ATTACH:
    :PROPERTIES:
    :ID:       8e92dbc8-3003-4938-9093-885bc40197a6
    :END:
Ich möchte von Magit nach Github schreiben können, ohne erneut das Password einzugeben.
Das geht mit SSH Schlüssel in drei Schritten. 

*1. SSH-Schlüsselpaar erzeugen.*
*2. ssh config Datei erzeugen.*
*3. Öffentlicher Schlüssel in GitHub registrieren.:*

#+begin_src bash
### Check for keys.
cd ~
ls -la .ssh


### Generate key
mkdir .ssh 
cd ~/.ssh
ssh-keygen -t rsa -b 4096 -C "lubuntu.mac@live-scripting.de"
id_rsa_github


# Empty Passpharse 2x RET
ls -la
## create config file
cat << EOF > ~/.ssh/config
Host github.com
  IdentitiesOnly yes
  IdentityFile ~/.ssh/id_rsa_github
EOF
 cat  ~/.ssh/config

### Copy the public Key to github
cat ~/.ssh/id_rsa_github.pub

### Check git operations
git pull -v 
git push -v

#+end_src

Die folgende Abbildung zeigt, wie man den öffentlichen Schlüssel zum GitHub Projekt hinzufügt, um mit SSH darauf zugreifen zu können.


#+DOWNLOADED: file:///tmp/VW5DH/2020-06-21_17-15-37.png @ 2020-06-21 17:34:52
#+Caption: Öffentlichen Schlüssel zum GitHub Projekt hinzufügen.
[[attachment:2020-06-21_17-34-52_2020-06-21_17-15-37.png]]

*** Konfiguration von org-download                                   :ATTACH:
    :PROPERTIES:
    :ID:       b476e18c-3478-4119-90b8-16c7c4b4df23
    :END:
org-download ist ein Emacs-Paket, das es erlaubt, Bilder per Drag and Drop einer Org-Datei hinzuzufügen. 
GitHub: https://github.com/abo-abo/org-download

Org-Download bietet zwei Methoden zum abspeichern der Dateien. Ich möchte den Org-Attachment Mechanismus benutzen. 
Dazu muss die Variable org-download-method per Customization angepasst werden.

#+DOWNLOADED: file:///tmp/DOS33/2020-06-21_17-51-44.png @ 2020-06-21 17:52:54
#+Caption: Customization von org-download-method um auf org-attach umzustellen.
[[attachment:2020-06-21_17-52-54_2020-06-21_17-51-44.png]]



